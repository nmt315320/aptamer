%---------------------基于细菌觅食算法的DNA计算编码设计--------------------------%
%-----------------------作者：姚尧     单位：大连理工大学----------------------------%

%--------------------------------当前部分是DNA生成及约束---------------------------%
%--------------------------------当前部分是DNA生成及约束---------------------------%
%--------------------------------当前部分是DNA生成及约束---------------------------%
%--------------------------------当前部分是DNA生成及约束---------------------------%
%--------------------------------当前部分是DNA生成及约束---------------------------%
%使用说明：1.设置BFOA初始参数，包含复制、趋化、概率、存留数量等；                            %
%                2.点击运行，等待命令行显示出运行时间，即为本段程序结束；                          %
%                   切记！！！进度条只是用来提示大概进展的，可以根据进度条信息去喝点茶；    %
%                   切记！！！看到运行时间后，关闭进度条窗口；                                             %
%                3.将运行时间上面的数量为numSave的序列，逐条复制到finalchoose子程序中， %
%                  余下说明在finalchoose中，请转到查看                                                         %


close all;
clc;
tic
%----------------------初始化------------------------%
% ------- 初始化 ----------%
Nre=9;    %复制次数
Nc=10;    %迭代次数（趋化次数）
Ped=0.1;  %消灭概率
numDNA=20; %生成DNA个数
numSave=22;%最终保留DNA个数
%Ne=20;
%Np=20;
%Ns=10;
%D=5;
diary('E:\博士论文相关\适配体\DNA_design\record.txt');
delete('E:\博士论文相关\适配体\DNA_design\record.txt');
diary('E:\博士论文相关\适配体\DNA_design\record.txt');

%-----随机生成20个碱基DNA序列作为细菌-----%
%-----定义碱基---0=A；1=G；2=T；3=C；---%
Dna=randi([0,3],numDNA,20);
DNA=char(numDNA,20);
%d1=['GTACTCTACTACAGCTGCAG';'GCACGTAGATGCAAAAGTCG';'ACTAGTGTGTATACGAGTGC'];
%evaluate(d1,numDNA,numSave)

for i=1:numDNA
    for ii=1:20
        switch Dna(i,ii)
            case 0
                DNA(i,ii)='A';
                num2str(DNA(i,ii));
            case 1
                DNA(i,ii)='G';
                num2str(DNA(i,ii));
            case 2
                DNA(i,ii)='T';
                num2str(DNA(i,ii));
            case 3
                DNA(i,ii)='C';
                num2str(DNA(i,ii));
        end
        
    end
end
fprintf('生成的DNA序列为：\n')
for i=1:numDNA
    if i<10
        fprintf('  %d:::     5''-%s-3''\n',i,DNA(i,:))
    else
        fprintf('%d:::     5''-%s-3''\n',i,DNA(i,:))
    end
end

%-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-%
%***********************************************%
%***********************************************%
% DNA=['GTACTCTACTACAGCTGCAG';'GCACGTAGATGCAAAAGTCG';'ACTAGTGTGTATACGAGTGC';'GAGCAGTGTACTAGACTGTG';'GTACACACAGCAGACATCTC';
% 'GCTCTGTAGTGACGAGTATC';'GCATATGTCTCTCGCAGATG';'ATCGAGTCTGAGAGACACTG';'GATGCGAGCTACTAGTGATG';'TAGACGACTACGCACTACTC';
% 'CACGAGTATAGTCAGCACTG';'CCTATTACGTGGACTATCCG';'ACGCAGTGCTATACTAGCAG';'ACGAGTGTGCGTGTATGTAG';'TGACGCTCTATAGTGCACTG';
% 'AGAGAGACGTCGACTCAGTA';'CTATATACGAGAGCGCACGA';'TGATGTAGATGCTGAGCTCG';'GAGCAGTGTACTAGACTGTG';'GTACACACAGCAGACATCTC';
% 'GCTCTGTAGTGACGAGTATC';'GCATATGTCTCTCGCAGATG';'ATCGAGTCTGAGAGACACTG';'GATGCGAGCTACTAGTGATG';'TAGACGACTACGCACTACTC']

e=0;
w=waitbar(0,'开始'); 
for i=1:Nre    %复制次数
    if i<Nre
    process=i/Nre;    
    waitbar(i/Nre,w,['奴才已经做了' num2str(100*process) '%了，主子您再喝点茶']);
    elseif i==Nre
    waitbar(1,w,'成了成了，这就要成了！！！');   
    end
    diary on;
    analysis(DNA,numDNA);
    evaluate(DNA,numDNA,numSave);
    if i>1
        fprintf('已完成第%d次复制--------------------------------------已完成第%d次复制\n',i-1,i-1)
        fprintf('请耐心等待，还剩%d次复制\n',Nre-i+1)
    end
    DNA=Chemotaxis(DNA,Nc,numDNA);
    fprintf('修改后--------------------------------------修改后\n')
    fprintf('修改后--------------------------------------修改后\n')
    fprintf('第%d次修改后DNA序列为：\n',i)
    for iii=1:numDNA
        if iii<10
            fprintf('  %d:::     5''-%s-3''\n',iii,DNA(iii,:))
        else
            fprintf('%d:::     5''-%s-3''\n',iii,DNA(iii,:))
        end
    end
    analysis(DNA,numDNA);
    BetterDNAindex=evaluate(DNA,numDNA,numSave);
    if i<Nre %最后1次不复制
        [DNA,ped]=reproduce(DNA(BetterDNAindex(1:numDNA/2),:));%得分高的一半DNA被复制，差的淘汰
    end
    if ped<Ped && i<Nre %最后一次不消灭
        e=e+1;
        DNA=eliminate(DNA);
        fprintf('随机消灭第%d次--------------------------------------随机消灭\n',e)
        fprintf('随机消灭第%d次--------------------------------------随机消灭\n',e)
    end
    fprintf('已复制%d次--------------------------------------已复制%d次\n',i,i)
    fprintf('已复制%d次--------------------------------------已复制%d次\n',i,i)
end
fprintf('最后一次复制已完成--------------------------------------最后一次复制已完成\n')
fprintf('*************************输出满足条件的最终DNA集合************************\n')
BetterDna=evaluate(DNA,numDNA,numSave);
for ii=1:numSave
    if ii<10
        fprintf('  %d（%d）:::     5''- %s -3''\n',ii,BetterDna(ii),DNA(BetterDna(ii),:))
    else
        fprintf('%d（%d）:::     5''- %s -3''\n',ii,BetterDna(ii),DNA(BetterDna(ii),:))
    end
    
end
diary off;
toc
%disp(['运行时间: ',num2str(toc)]);
%***********************************************%
%***********************************************%
%-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-%

%--------------约束检测----------------%
function analysis(dna,numDNA)
for i=1:numDNA
    fprintf('第%d个DNA的约束情况：',i)
    fprintf(dna(i,:))
    fprintf('\n')
    %fprintf('Hanming=%d\n',hanming(dna(i,:),dna(:,:)))
    %s=dna(:,:);
    %s(i,:)=[];
    [sim,~]=similarity(dna(i,:),dna(:,:),numDNA,i);
    [hme,~]=h_measure(dna(i,:),dna(:,:),numDNA);
    fprintf('Similarity=%d    \n',sim)
    fprintf('H_measure=%d      \n',hme)
    fprintf('Continuity=%d\n',continuity(dna(i,:),numDNA))
    %fprintf('Continuity111=%d\n',Continuity(DNA(i,:)))
    fprintf('GC_content=%.2f\n',gccontent(dna(i,:),numDNA))
    fprintf('Tm=%.2f\n',TmBioBox(dna(i,:)))
    fprintf('Hairpinnum=%d\n',Hairpin(dna(i,:)))
    %Hanming=hanming(DNA(i,:))
    %Similarity=similarity(DNA(i,:))
    %H_measure=h_measure(DNA(i,:))
    %[Similarity1,H_measure1]=HmSm(DNA(i,:))
    %Continuity=continuity(DNA(i,:))
    %GC=gccontent(DNA(i,:))
    %Tm=TmBioBox(DNA(i,:))
    %Hairpinnum= Hairpin(DNA(i,:))
end
end
%---------------------------------------%
function fianl(dna,numDNA,numSave,fianlbest)
for i=1:numSave
    fprintf('第'+i+'('+fianlbest(i)+')'+'个DNA的约束情况：')
    fprintf(dna(fianlbest(i),:))
    fprintf('\n')
    %s=dna;
    %s(i,:)=[];
    [sim,~]=similarity(dna(fianlbest(i),:),dna(:,:),numDNA,i);
    [hme,~]=h_measure(dna(fianlbest(i),:),dna(:,:),numDNA);
    fprintf('Similarity=%d      \n',sim)
    fprintf('H_measure=%d      \n',hme)
    fprintf('Continuity=%d\n',continuity(dna(fianlbest(i),:),numDNA))
    fprintf('GC_content=%.2f\n',gccontent(dna(fianlbest(i),:),numDNA))
    fprintf('Tm=%.2f\n',TmBioBox(dna(fianlbest(i),:)))
    fprintf('Hairpinnum=%d\n',Hairpin(dna(fianlbest(i),:)))
end
end


%--------------------------------------各种约束-----------------------------------------%
%------------------------------------汉明距离约束--------------------------------------%
function h=hanming(x,y)
han=char(20);
for i=1:20
    han(i)=0;
end
for i=1:20
    for ii=1:20
        for iii=1:20
            if x(i,ii)~=y(i,iii)
                han(i)=han(i)+1;
            end
        end
    end
end

h=max(han);
end
%-----------------------------------------------------------------------------------------%

%--------------------------------------相似度约束---------------------------------------%
function [S,Smax]=similarity(xo,yo,numDNA,flag)
s=[];
for i=1:40
    s(i)=0;
end
smax=[];
for i=1:numDNA
    smax(i)=0;
end

stotal=0;
Smax=0;
for ii=1:numDNA
    if flag~=ii
        for k=1:19  %k表示y向'右'移动距离
            x=xo;
            y=circshift(yo(ii,:),k);
            for i=k:20
                if  x(i)==y(i)
                    s(k)=s(k)+1;
                end
            end
        end
        for kk=1:19 %kk表示y向'左'移动距离(用x向右移动替代y向左移动)
            y=yo;
            x=circshift(xo,kk);
            for i=kk:20
                if  x(i)==y(ii,i)
                    s(19+kk)=s(kk+19)+1;
                end
            end
        end
        for i=1:20
            if  xo(i)==yo(ii,i)
                s(40)=s(40)+1;
            end
        end
        [ss,~]=max(s);%~表示出现最大相似的位置（20之前为y右移，21之后为y左移）
        s(:,:)=0;
        stotal=stotal+ss;
        smax(ii)=ss;
    end
end
[Smax,~]=max(smax);
S=stotal;
end
%-----------------------------------------------------------------------------------------%

%--------------------------------------H-measure约束---------------------------------------%
function [hm,Hmax]=h_measure(xo,yo,numDNA)
s=[];
for i=1:40
    s(i)=0;
end
hmax=[];
for i=1:numDNA
    hmax(i)=0;
end
htotal=0;
for ci=1:numDNA   %对y取补
    for cii=1:20
    switch yo(ci,cii)
        case 'A'
            yo(ci,cii)='T';
        case 'T'
            yo(ci,cii)='A';
        case 'G'
            yo(ci,cii)='C';
        case 'C'
            yo(ci,cii)='G';
    end
    end
end
for ii=1:numDNA
    for k=1:19  %k表示y向'右'移动距离
        x=xo;
        y=circshift(yo(ii,:),k);
        for i=k:20
            if  x(i)==y(i)
                s(k)=s(k)+1;
            end
        end
    end
    for kk=1:19 %kk表示y向'左'移动距离(用x向右移动替代y向左移动)
        y=yo;
        x=circshift(xo,kk);
        for i=kk:20
            if  x(i)==y(ii,i)
                s(19+kk)=s(kk+19)+1;
            end
        end
    end
    for i=1:20
        if  xo(i)==yo(ii,i)
            s(40)=s(40)+1;
        end
    end
    [ss,~]=max(s);%hmp表示出现最大相似的位置（20之前为y右移，21之后为y左移）
    s(:,:)=0;
    htotal=htotal+ss;
    hmax(ii)=ss;
end
[Hmax,~]=max(hmax);
hm=htotal;
end

%-----------------------------------------------------------------------------------------%

%------------------------------------------------------------------------------------------%
function [Hm,Sim]=HmSm(DNAs)
% 用于码字评价，计算DNA序列DNA1相对于在DNAs中序列的的Similarity与H-measure，方法与Shin2005论文相同，返回2个列向量，若DNA1与DNAs中的某个序列相同，则其Similarity为0
% DNA1的长度与DNAs的列数相同,相同序列的Similarity=0
% Similarity符合Shin2005，H-measure符合Shin2005,除c0720_Shin2005TSP_MEA外
% global Gap;
[m,l]=size(DNAs);
Gap1=round(l/4);  % 取序列的1/4为Gap，与Shin2005数据基本相同
for p=1:m
    SimValue=zeros(m,1);
    HmValue=zeros(m,1);
    DNA1=DNAs(p,:);
    ReverseDNA1=seqreverse(DNA1);%IntDNAx取反
    for j=1:m
        if sum(DNA1==DNAs(j,:))==l  % 相同的DNA序列不比较Similarity,仅比较H-measure
            for g=0:Gap1  %  取序列的1/4为Gap
                tempIntDNAy=[DNAs(j,:), zeros(1,g)+5, DNAs(j,:)];
                for i=-l+1:l-1
                    ShiftValue=shift(tempIntDNAy,i);
                    currentHm=h_dis(ReverseDNA1,ShiftValue)+h_con(ReverseDNA1,ShiftValue);
                    HmValue(j)=max(HmValue(j),currentHm);
                end
            end
        else                        % 同时比较Similarity与H-measure
            for g=0:Gap1  %  取序列的1/4为Gap
                tempIntDNAy=[DNAs(j,:), zeros(1,g)+5, DNAs(j,:)];
                for i=-l+1:l-1
                    ShiftValue=shift(tempIntDNAy,i);
                    currentSim=s_dis(DNA1,ShiftValue)+s_con(DNA1,ShiftValue);
                    currentHm=h_dis(ReverseDNA1,ShiftValue)+h_con(ReverseDNA1,ShiftValue);
                    SimValue(j)=max(SimValue(j),currentSim);
                    HmValue(j)=max(HmValue(j),currentHm);
                end
            end
        end
    end
    Hm(p)=sum(HmValue);
    Sim(p)=sum(SimValue);
end
end

function IntDNAShifted= shift( IntDNA_nb,i )
%将IntDNA_nb平移i位，i>0右移，i<0,左移;空位用'-'(5)添加
if i==0
    IntDNAShifted=IntDNA_nb;
    return;
end
l=size(IntDNA_nb,2);%DNA长度
temp=zeros(1,abs(i))+5;
if (0<i) && (i<l)   %右移i位添加i个'-'
    IntDNAShifted=[temp, IntDNA_nb(1:l-i)];
    return;
end
if (i<0) && (i>-l)  %左移i位添加i个'-'
    IntDNAShifted=[IntDNA_nb(abs(i)+1:l),temp];
    return;
end
if abs(i)>=l %全部替换为'-'
    IntDNAShifted=zeros(1,l)+5;
    return;
end
end

function IntValue= h_dis( IntDNAx,IntDNAy,H_dis)
%H_measure函数第一项，H_dis为用户指定常数;H_dis为0..1
global H_DIS;
H_DIS = 0.17;
if nargin==2
    H_dis=H_DIS;
end
Sigma_bp=0;
l=size(IntDNAx,2);
for i=1:l
    Sigma_bp=Sigma_bp+bp(IntDNAx(i),IntDNAy(i));
end
temp=H_dis*length_nb(IntDNAy)/2;
IntValue=T(Sigma_bp,temp);
end

function LenNoBlank= length_nb(IntDNA_nb)
%返回字母表{A C G T -}->{1 2 3 4 5}上字符串中非-的字符数
LenNoBlank=sum(IntDNA_nb~=5);
end

function IntValue = h_con( IntDNAx,IntDNAy,H_con )
%H_measure函数第二项，H_con为用户指定常数;H_con为1..Length(DNA)
global H_CON;
H_CON=6;
if nargin==2
    H_con=H_CON;
end
IntValue=0;
l=size(IntDNAx,2);
for i=1:l
    IntValue=IntValue+T(cbp(IntDNAx,IntDNAy,i),H_con);
end
end

function IntValue = cbp(IntDNAx,IntDNAy,i)
%从第i个位置开始长度为c的IntDNAx与IntDNAy的公共互补子串的长度;IN:IntDNAx、IntDNAy,整数编码DNA,i,起始位置;OUT:IntValue,最长公共字串长度
IntValue=0;
l=size(IntDNAx,2);
if i>l
    error('i越界');
end
if i~=1
    if bp(IntDNAx(i),IntDNAy(i))==0
        j=1;
        while j<=l-i && bp(IntDNAx(i+j),IntDNAy(i+j))
            IntValue=IntValue+1;
            j=j+1;
        end
    else
        return;
    end
else  %i==1
    if bp(IntDNAx(i),IntDNAy(i))==0
        j=1;
        while j<=l-i && bp(IntDNAx(i+j),IntDNAy(i+j))
            IntValue=IntValue+1;
            j=j+1;
        end
    else
        j=0;
        while j<=l-i && bp(IntDNAx(i+j),IntDNAy(i+j))
            IntValue=IntValue+1;
            j=j+1;
        end
    end
end
end
%------------------------------------------------------------------------------------------%


function Values= Continuity(DNAs)
% 依Shin2005,计算DNAs的连续性,返回数值列向量Values,不包括'-',t为连续性控制阈值
global Con_T;
Con_T = 2;
[m,l]=size(DNAs);
Values=zeros(m,1);   % 初始化连续值列向量
t=Con_T;
for j=1:m
    Values(j)=0;
    for i=1:l-t+1
        temp=0;
        for a=0:3
            ca=c_a(DNAs(j,:),i,a);
            temp=temp+T(ca,t)^2;
        end
        Values(j)=Values(j)+temp;
    end
end
end

function IntValue = c_a( IntDNAx,i,a)
%Continuity函数中辅助函数,从第i+1个位置开始连续出现碱基a的子串长度
%t为阈值控制
IntValue=0;
l=size(IntDNAx,2);
if i>l
    error('i越界');
end
if i~=1
    if IntDNAx(i)~=a
        j=1;
        while j<=l-i && IntDNAx(i+j)==a
            IntValue=IntValue+1;
            j=j+1;
        end
    else
        return;
    end
else  %i==1
    if IntDNAx(i)~=a
        j=1;
        while j<=l-i && IntDNAx(i+j)==a
            IntValue=IntValue+1;
            j=j+1;
        end
    else
        j=0;
        while j<=l-i && IntDNAx(i+j)==a
            IntValue=IntValue+1;
            j=j+1;
        end
    end
end
end

function IntValue= T(i,j)
%i>j返回i，否则返回0
if i>j
    IntValue=i;
else
    IntValue=0;
end
end



%-----------------------------------重复性（连续性）约束--------------------------------%
function con=continuity(x,numDNA)
c1=0;
c2=0;
cmax=0;
x(numDNA+1)=0;  %保证末尾不同
for i=1:numDNA
    if x(i)==x(i+1)
        c1=c1+1;
    else
        c2=c1;
        c1=0;
        if c2>=cmax
            cmax=c2;
        end
    end
end
con=cmax;
end
%----------------------------------------------------------------------------------%

%-----------------------------------GC含量约束------------------------------------%
function gc=gccontent(x,numDNA)
p=0;
for i=1:20
    if x(i)=='G' || x(i)=='C'
        p=p+1;
    end
end
%p=(p/20)*100;
gc=p/20;
%gc=num2str(p)+"%";
end
%----------------------------------------------------------------------------------%

%-----------------------------------------Tm约束----------------------------------%
function [Tm,GC] = TmBioBox(x)
SaltValue=1; % Shin2005 盐浓度1M  Bioinformatics Toolbox 默认 0.05
PrimerconcValue=10^(-8); %DNA分子浓度
m=size(x,1);% DNA序列碱基数量
GC=zeros(m,1);
Tm=GC;
for i=1:m
    oligoprops=oligoprop(x(i,:),'Salt', SaltValue,'Primerconc', PrimerconcValue);
    Tm(i)=round(oligoprops.Tm(5)*10000)/10000; %% Tm值，保留小数点后四位
end
end
%----------------------------------------------------------------------------------------%

%------------------------------------------发夹约束---------------------------------------%
function Values = Hairpin( DNAs )
% 计算DNAs(整数编码矩阵)的发卡数，返回Values列向量
% function IntValue = Hairpin( IntDNA, R_min,P_min )
%依Shin2005,计算IntDNA的发卡数
R_MIN=6;
P_MIN=6;
PINLEN=3;
if nargin==1
    R_min=R_MIN;
    P_min=P_MIN;
end
[m,l]=size(DNAs);
Values=zeros(m,1);
for k=1:m
    IntDNA=DNAs(k,:);
    for p=P_min:(l-R_min)/2
        for r=R_min:(l-2*p)
            for i=0:(l-2*p-r)
                Sigma_bp=0;
                for j=0:pinlen(p,r,i,IntDNA)-1
                    Sigma_bp=Sigma_bp+bp(IntDNA(p+i-j),IntDNA(p+i+r+1+j));
                end
                Values(k)=Values(k)+TT(Sigma_bp,pinlen(p,r,i,IntDNA)/ PINLEN);
            end
        end
    end
end
end

function minValue = pinlen( p,r,i,IntDNA )
%辅助函数，返回min(p+i,l-(p+i+r))
l=size(IntDNA,2);
minValue=min(p+i,l-p-i-r);
end

function BoolValue = bp( IntDNAa,IntDNAb )
%intDNAa与intDNAb是否互补，Y返回1,N返回0;IN：整数编码DNA向量{ACGT}->{2031};OUT：整数值{0,1}
l=size(IntDNAa,2);
m=size(IntDNAb,2);
if l==m
    temp=3-IntDNAa;
    if sum(temp==IntDNAb)==l
        BoolValue=1;%'互补'
    else
        BoolValue=0;%'不互补'
    end
else
    BoolValue=0;
    error('DNA长度不同');
end
end

function IntValue= TT(i,j)
%i>j返回i，否则返回0
if i>j
    IntValue=i;
else
    IntValue=0;
end
end
%------------------------------------------------------------------------------------------%


%-----------------------评估------------------------%
function betterdnaindex=evaluate(dna,numDNA,numSave)
%各约束按照一定的权重来计算E
%Hanming=hanming(DNA(i,:))
%Similarity=similarity(DNA(i,:))
%H_measure=h_measure(DNA(i,:))
%[Similarity1,H_measure1]=HmSm(DNA(i,:))
%Continuity=continuity(DNA(i,:))
%GC=gccontent(DNA(i,:))
%Tm=TmBioBox(DNA(i,:))
%Hairpinnum= Hairpin(DNA(i,:))
%计分规则如下
%【第一次尝试】7个条件，其中，Tm40分，hanming占10分、sim占15分、H_m占15分、con占20分，共计100分
%【第二次尝试】6个条件，其中，Tm40分，sim占20分、H_m占20分、con占20分，共计100分
%【第三次尝试】6个条件，其中，Tm30分，sim占27分、H_m占27分、con占16分，共计100分
%【第四次尝试】6个条件，其中，Tm38分，sim占21分、H_m占21分、con占20分，共计100分
%【第五次尝试】6个条件，其中，Tm20分，sim占30分、H_m占30分、con占20分，共计100分
%【第六次尝试】6个条件，其中，Tm40分，sim占30分、H_m占30分、con占20分，共计120分
%1：GC不等于50%、hairpin不等于0，总分直接记为0分
%2：Tm：【<=57】=40分；【57~67】40分逐级递减（连续非离散递减）；【>=67】=0分
%4：sim：除以DNA总数，【0~5】=30；【6~11】每位减5,线性；【>=11】总分直接记为0分
%5：H_m：除以除以DNA总数，【0~5】=30；【6~11】每位减5,线性；【>=11】总分直接记为0分
%6：con：【=0】=20分；【=1】=10分；【=2】=5分；【>=3】=0分
goal=[];
for i=1:numDNA
    goal(i)=0;
end
for i=1:numDNA
    %if hanming(dna(i,:),dna(:,:))<=20 && hanming(dna(i,:),dna(:,:))>15
    %   goal(i)=goal(i)+(hanming(dna(i,:))-15)*2;
    % else
    %    goal(i)=goal(i)+0;
    %end
    if continuity(dna(i,:),numDNA)==0
        goal(i)=goal(i)+20;
    elseif continuity(dna(i,:),numDNA)==1
        goal(i)=goal(i)+10;
    elseif continuity(dna(i,:),numDNA)==2
        goal(i)=goal(i)+5;
    else
        goal(i)=goal(i)+0;
    end
    if TmBioBox(dna(i,:))<=57
        goal(i)=goal(i)+40;
    elseif  TmBioBox(dna(i,:))>57&& TmBioBox(dna(i,:))<=67
        goal(i)=goal(i)+((67-TmBioBox(dna(i,:)))/10)*40;
    else
        goal(i)=goal(i)+0;
    end
    [sim,smax]=similarity(dna(i,:),dna(:,:),numDNA,i);
    [hme,hmax]=h_measure(dna(i,:),dna(:,:),numDNA);
    if sim/(numDNA-1)<=5
        goal(i)=goal(i)+30;
    elseif sim/(numDNA-1)>=6 && sim/(numDNA-1)<11
        goal(i)=goal(i)+(11-sim/(numDNA-1))*5;
    elseif sim/(numDNA-1)>=11 || smax>10
        goal(i)=0;
    end
    if hme/numDNA<=5
        goal(i)=goal(i)+30;
    elseif hme/numDNA>=6 && hme/numDNA<11
        goal(i)=goal(i)+(11-hme/numDNA)*5;
    elseif hme/numDNA>=11 || hmax>10 || sim/(numDNA-1)>=11 || smax>10
        goal(i)=0;
    end
    if gccontent(dna(i,:),numDNA)==0.5 && Hairpin(dna(i,:))==0
        goal(i)=goal(i);
    else
        goal(i)=0;
    end
    fprintf('第%d个DNA的得分=%.2f\n',i,goal(i))
end
[sg,IX]=sort(goal,'descend');
[~,UIX]=unique(sg,'stable');
betterdnaindex=IX(UIX);
end
%----------------------------------------------------%


%计算DNA总分
function GTotal=goaltotal(dna,numDNA)
goal=double(numDNA);
for i=1:numDNA
    goal(i)=0;
end
for i=1:numDNA
    %  if hanming(dna(i,:),dna(:,:))<=20 && hanming(dna(i,:),dna(:,:))>15
    % else
    %      goal(i)=goal(i)+0;
    %  end
    if continuity(dna(i,:),numDNA)==0
        goal(i)=goal(i)+20;
    elseif continuity(dna(i,:),numDNA)==1
        goal(i)=goal(i)+10;
    elseif continuity(dna(i,:),numDNA)==2
        goal(i)=goal(i)+5;
    else
        goal(i)=goal(i)+0;
    end
    if TmBioBox(dna(i,:))<=57
        goal(i)=goal(i)+40;
    elseif  TmBioBox(dna(i,:))>57&& TmBioBox(dna(i,:))<=67
        goal(i)=goal(i)+((67-TmBioBox(dna(i,:)))/10)*40;
    else
        goal(i)=goal(i)+0;
    end
    [sim,smax]=similarity(dna(i,:),dna(:,:),numDNA,i);
    [hme,hmax]=h_measure(dna(i,:),dna(:,:),numDNA);
    if sim/(numDNA-1)<=5
        goal(i)=goal(i)+30;
    elseif sim/(numDNA-1)>=6 && sim/(numDNA-1)<11
        goal(i)=goal(i)+(11-sim/(numDNA-1))*5;
    elseif sim/(numDNA-1)>=11 || smax>10
        goal(i)=0;
    end
    if hme/numDNA<=5
        goal(i)=goal(i)+30;
    elseif hme/numDNA>=6 && hme/numDNA<11
        goal(i)=goal(i)+(11-hme/numDNA)*5;
    elseif hme/numDNA>=11 || hmax>10 || sim/(numDNA-1)>=11 || smax>10
        goal(i)=0;
    end
    if gccontent(dna(i,:),numDNA)==0.5 && Hairpin(dna(i,:))==0
        goal(i)=goal(i);
    else
        goal(i)=0;
    end
end
GTotal=0;
for ii=1:numDNA
    GTotal=goal(ii)+GTotal;
end
end


%----------------------------------------趋化----------------------------------------------%
function d=Chemotaxis(dna,nc,numDNA)
dnaO=dna;
for i=1:nc   %趋化次数
    fprintf('.')
    %-------------------汉明距离调整-------------------%
    for ii=1:numDNA
        % dnao=dna;
        % if hanming(dna(ii,:),dna(:,:))<20
        %     choose=ceil(rand(1,1)*20);
        %     if  dna(ii,choose)=='A'
        %         CH=['T','G','C'];
        %         change=CH(randperm(length(CH),1));
        %         dna(ii,choose)=change;
        %     elseif dna(ii,choose)=='T'
        %         CH=['A','G','C'];
        %         change=CH(randperm(length(CH),1));
        %         dna(ii,choose)=change;
        %     elseif dna(ii,choose)=='G'
        %         CH=['A','T','C'];
        %         change=CH(randperm(length(CH),1));
        %         dna(ii,choose)=change;
        %     elseif dna(ii,choose)=='C'
        %         CH=['A','T','G'];
        %        change=CH(randperm(length(CH),1));
        %         dna(ii,choose)=change;
        %    end
        % end
        % if hanming(dnao(ii,:),dnao(:,:))>hanming(dna(ii,:),dna(:,:))
        %     dna=dnao;   %如果调整后导致汉明距离得分更差，则回退
        % end
        %end
        %----------------------------------------------------%
        
        
        %--------------相似性和H_measure调整---------------%
        %for ii=1:20
        dnao=dna;
        [sim,smax]=similarity(dna(i,:),dna(:,:),numDNA,i);
        [hme,hmax]=h_measure(dna(i,:),dna(:,:),numDNA);
        [simo,smaxo]=similarity(dnao(i,:),dnao(:,:),numDNA,i);
        [hmeo,hmaxo]=h_measure(dnao(i,:),dnao(:,:),numDNA);
        if sim>0 || hme>0
            choose=ceil(rand(1,1)*20);%随机选择一位
            if  dna(ii,choose)=='A'
                CH=['T','G','C'];
                change=CH(randperm(length(CH),1));
                dna(ii,choose)=change;
            elseif dna(ii,choose)=='T'
                CH=['A','G','C'];
                change=CH(randperm(length(CH),1));
                dna(ii,choose)=change;
            elseif dna(ii,choose)=='G'
                CH=['A','T','C'];
                change=CH(randperm(length(CH),1));
                dna(ii,choose)=change;
            elseif dna(ii,choose)=='C'
                CH=['A','T','G'];
                change=CH(randperm(length(CH),1));
                dna(ii,choose)=change;
            end
        end
        if sim>simo || hme>hmeo
            dna=dnao;   %如果调整后导致相似性得分更差，则回退   如果调整后导致H_measure得分更差，则回退
        elseif smax>smaxo || hmax>hmaxo
            dna=dnao;
        elseif smax>=10 || hmax>=10
            dna=dnao;
        end
        % end
        %-------------------------------------------------%
        
        %----------------重复性(连续性)调整----------------%
        %  for ii=1:20
        %dnao=dna;
        if continuity(dna(ii,:),numDNA)>0
            for iii=1:19
                if dna(ii,iii)==dna(ii,iii+1) && dna(ii,iii)=='A'
                    CH=['T','G','C'];
                    change=CH(randperm(length(CH),1));
                    dna(ii,iii+1)=change;
                elseif dna(ii,iii)==dna(ii,iii+1) && dna(ii,iii)=='T'
                    CH=['A','G','C'];
                    change=CH(randperm(length(CH),1));
                    dna(ii,iii+1)=change;
                elseif dna(ii,iii)==dna(ii,iii+1) && dna(ii,iii)=='G'
                    CH=['A','T','C'];
                    change=CH(randperm(length(CH),1));
                    dna(ii,iii+1)=change;
                elseif dna(ii,iii)==dna(ii,iii+1) && dna(ii,iii)=='C'
                    CH=['A','T','G'];
                    change=CH(randperm(length(CH),1));
                    dna(ii,iii+1)=change;
                end
                if continuity(dna(ii,:),numDNA)>continuity(dnao(ii,:),numDNA)
                    dna=dnao;   %如果调整后导致连续性得分更差，则回退
                end
            end
        end
        % end
        %-------------------------------------------------%
        
        %---------------GC含量调整-------------%
        %for ii=1:20
        if gccontent(dna(ii,:),numDNA)<0.5
            r=0;
            remark=[];
            for iii=1:20
                if dna(ii,iii)=='A' || dna(ii,iii)=='T'
                    r=r+1;
                    remark(r)=iii;
                end
            end
            n=length(remark);
            choose=ceil(rand(1,1)*n);%随机选择一位
            CH=['C','G'];
            change=CH(randperm(length(CH),1));%随机修改碱基
            dna(ii,choose)=change;
        end
        if gccontent(dna(ii,:),numDNA)>0.5
            r=0;
            remark=[];
            for iii=1:20
                if dna(ii,iii)=='G' || dna(ii,iii)=='C'
                    r=r+1;
                    remark(r)=iii;
                end
            end
            n=length(remark);
            choose=ceil(rand(1,1)*n);%随机选择一位
            CH=['A','T'];
            change=CH(randperm(length(CH),1));%随机修改碱基
            dna(ii,choose)=change;
        end
        if gccontent(dna(ii,:),numDNA)==0.5
        end
        %----------------------------------------------%
        
        GOT=goaltotal(dnaO,numDNA);
        GT=goaltotal(dna,numDNA);
        
        if GOT>GT
            dna=dnaO;
        else
            dnaO=dna;
        end
    end
end
fprintf('\n')

fprintf('\n')
d=dna;
end

%----------------------------------------------复制--------------------------------------------%
function [re,ped]=reproduce(dna)
re=[dna;dna];
ped=rand(1,1);
end
%-----------------------------------------------------------------------------------------------%

%-------------------------------------------随机消灭--------------------------------------------%
function e=eliminate(dna)
[m,~]=size(dna);
i=randi([m/4,3*m/4],1,m/4);            %随机选DNA行数m，从四分之一m到四分之三m之间的四分之一m个
choose=ceil(rand(1,2)*20);%随机选择二位
CH=['A','T','G','C'];
change=CH(randperm(length(CH),1));
dna(i,choose)=change;
e=dna;
end
%------------------------------------------------------------------------------------------------%